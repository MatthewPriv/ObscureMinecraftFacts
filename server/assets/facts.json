{
  "facts": [
    {
      "name": "explosive_furnace_minecarts",
      "title": "Explosive Furnace Minecarts",
      "description": "In versions prior to Minecraft 1.19 if the Furnace Minecart entity was destroyed by an explosion then it would only drop a Minecart item. This was inconsistent with the other Minecart items, for example the Chest Minecart would drop a Chest and a Minecart. In versions 1.19 and later this behaviour was changed so that the entity would drop it's combined item, inadvertently fixing this 'bug'.",
      "tags": [
        "Entities",
        "Items"
      ],
      "snippets": [
        "minecart_furnace_destroy"
      ]
    },
    {
      "name": "quasi_connectivity",
      "title": "Quasi Connectivity",
      "description": "Ever since pistons, dispensers, and droppers were implemented in the game they behave weirdly when being powered 'from above', and this was apparently because the developers had simply copy and pasted the code from the Door (which is a 2 block high block, thus needing to also check above). Players have grown to like this quirk and since Mojang have declared this a feature not a bug.",
      "tags": [
        "Redstone"
      ],
      "snippets": [
        "piston_neighbor_signal",
        "dispenser_neighbor_changed"
      ]
    },
    {
      "name": "scary_ocelots",
      "title": "Scary Ocelots",
      "description": "One of the strangest mob spawning behaviours in the game is how the Ocelot mob spawns according to the 'monster' mob cap. A brief rundown is that Minecraft has different types of mobs, two of which being 'monsters' and 'creatures'. Once there are a certain number of these types of mobs in the world then the game will stop spawning that type of mob. For some reason the developers categories the Ocelot as a 'monster' despite it not being hostile instead of being categorised as a 'creature' which is much more fitting. As a result of this if you have too many monsters in your world Ocelots will simply never spawn, even if there are no 'friendly' creatures in your world. A further complication of this is if you are playing on 'Peaceful' mode which completely disables monster spawning thus disabling Ocelot spawning.",
      "tags": [
        "Entities",
        "Biomes"
      ],
      "snippets": [
        "jungle_mob_spawning"
      ]
    },
    {
      "name": "asynchronous_stained_glass",
      "title": "Asynchronous Stained Glass",
      "description": "Minecraft is designed to be a single threaded game. This means that all the core game code runs on a single thread, which we will call the <b>main thread</b>, while there are some aspects of the game that are ran on other threads such as networking the core game all runs on the main thread. Because of this, the game is not designed to handle running code on asynchronous threads and doing so could lead to race conditions which is where two separate threads are trying to access and/or modify the same data.\n\nHowever in versions 1.12.2 and below the developers left in some core game code which ran on a asynchronous thread. In Minecraft when you place stained glass over a beacon the beacon beam will change colour according to the colour of the stained glass, in order to do this you simply just check all the possible blocks below the stained glass, if theres a beacon then you update it. The developers thought that this might be expensive so they thought they could just run it asynchronously since it wasn't that important.",
      "tags": [
        "Redstone",
        "Technical"
      ],
      "snippets": [
        "block_beacon_update_color_async"
      ]
    },
    {
      "name": "wandering_zombies",
      "title": "Wandering Zombies",
      "description": "There was a very interesting bug involving mob pathfinding, more specifically Zombie pathfinding in versions prior to 1.19. If the player were to place a turtle egg at <code>(0, 0, 0)</code> they would notice that Zombies in their world would mysteriously start pathfinding towards there. It is a game mechanic that Zombies pathfind towards turtle eggs as they want to trample on them, however it is unusual that Zombies <b>always</b> pathfind to an egg at <code>(0, 0, 0)</code> even if they are thousands or even millions of blocks away.",
      "tags": [
        "Entities"
      ],
      "snippets": [
        "move_to_block_goal_find_nearest_block",
        "remove_block_goal_can_use"
      ]
    },
    {
      "name": "dimensional_piston_teleportation",
      "title": "Dimensional Piston Teleportation",
      "description": "When you go through an end portal in Minecraft you expect to be teleported to the end platform which is where you always end up. However there is a bug which allows you to teleport to the end with your overworld coordinates. By placing a piston under the end portal facing horizontally and pushing the player horizontally under the end portal you get teleported to the end but with your overworld coordinates. The reason for this is a little complex and for this reason the code snippets for this have been simplified.",
      "tags": [
        "Entities"
      ],
      "snippets": [
        "server_game_packet_listener_impl_handle_move_player",
        "entity_move",
        "end_portal_block_entity_inside"
      ]
    },
    {
      "name": "undefined_logs",
      "title": "Undefined Logs",
      "description": "There was a bug in versions 1.8 and before where sometimes an oak log would generate at <code>(0, 0, 0)</code>. The reason for this is because of a divide by 0 error. In Java if you divide by 0 when using floating point numbers it will return the <code>NaN</code> float, however if you cast this float into an integer it will transform it into <code>0</code>. Lets have a look at the snippet below.",
      "tags": [
        "Biomes"
      ],
      "snippets": [
        "world_gen_big_tree_generate_limbs"
      ]
    }
  ],
  "snippets": [
    {
      "name": "minecart_furnace_destroy",
      "fact": "explosive_furnace_minecarts",
      "mappings": "Mojang",
      "source": "net.minecraft.world.entity.vehicle.MinecartFurnace",
      "version": "1.18.2",
      "snippet": [
        "@Override",
        "public void destroy(DamageSource source) {",
        "    super.destroy(source);",
        "    if (!source.isExplosion() && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {",
        "        this.spawnAtLocation(Blocks.FURNACE);",
        "    }",
        "}"
      ],
      "description": "The reason for the behaviour is because of the <code>!source.isExplosion()</code> check."
    },
    {
      "name": "dispenser_neighbor_changed",
      "fact": "quasi_connectivity",
      "mappings": "Mojang",
      "source": "net.minecraft.world.level.block.DispenserBlock",
      "version": "1.20.4",
      "snippet": [
        "@Override",
        "public void neighborChanged(BlockState state, Level level, BlockPos pos, Block neighborBlock, BlockPos neighborPos, boolean movedByPiston) {",
        "    boolean isPowered = level.hasNeighborSignal(pos) || level.hasNeighborSignal(pos.above());",
        "    boolean isTriggered = state.getValue(TRIGGERED);",
        "    if (isPowered && !isTriggered) {",
        "        level.scheduleTick(pos, this, 4);",
        "        level.setBlock(pos, state.setValue(TRIGGERED, true), 2);",
        "    } else if (!isPowered && isTriggered) {",
        "        level.setBlock(pos, state.setValue(TRIGGERED, false), 2);",
        "    }",
        "}"
      ],
      "description": "The reason for this behaviour is because the <code>isPowered</code> boolean is determined by whether the current block position is has a signal OR if the position above that has a signal."
    },
    {
      "name": "piston_neighbor_signal",
      "fact": "quasi_connectivity",
      "mappings": "Mojang",
      "source": "net.minecraft.world.level.block.piston.PistonBaseBlock",
      "version": "1.20.4",
      "snippet": [
        "private boolean getNeighborSignal(SignalGetter getter, BlockPos pos, Direction facing) {",
        "    for (Direction direction : Direction.values()) {",
        "        if (direction != facing && getter.hasSignal(pos.relative(direction), direction)) {",
        "            return true;",
        "        }",
        "    }",
        "    if (getter.hasSignal(pos, Direction.DOWN)) {",
        "        return true;",
        "    }",
        "    BlockPos above = pos.above();",
        "    for (Direction direction : Direction.values()) {",
        "        if (direction != Direction.DOWN && getter.hasSignal(above.relative(direction), direction)) {",
        "            return true;",
        "        }",
        "    }",
        "    return false;",
        "}"
      ],
      "description": "This snippet is responsible for determining whether a piston has a power signal, it is a bit more complicated then the dispenser one as pistons cannot be powered from the direction they are facing, hence why it has it's own method. As you can see it does these checks twice, once for the current position and once for the position above this."
    },
    {
      "name": "jungle_mob_spawning",
      "fact": "scary_ocelots",
      "mappings": "Mojang",
      "source": "net.minecraft.data.worldgen.biome.OverworldBiomes",
      "version": "1.20.4",
      "snippet": [
        "public static Biome jungle(HolderGetter<PlacedFeature> features, HolderGetter<ConfiguredWorldCarver<?>> carvers) {",
        "    MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();",
        "    BiomeDefaultFeatures.baseJungleSpawns(builder);",
        "    builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.PARROT, 40, 1, 2))",
        "        .addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.OCELOT, 2, 1, 3))",
        "        .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.PANDA, 1, 1, 2));",
        "    return baseJungle(features, carvers, 0.9F, false, false, true, builder, Musics.createGameMusic(SoundEvents.MUSIC_BIOME_JUNGLE));",
        "}"
      ],
      "description": "As you can see in the snippet, this is responsible for determining mob spawning in the jungle, this adds parrots, ocelots, and pandas. However ocelots are put under the 'monster' category, <code>addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.OCELOT, 2, 1, 3))</code>, making them come under the monster spawn limits."
    },
    {
      "name": "block_beacon_update_color_async",
      "fact": "asynchronous_stained_glass",
      "mappings": "MCP",
      "source": "net.minecraft.block.BlockBeacon",
      "version": "1.12.2",
      "snippet": [
        "public static void updateColorAsync(final World world, final BlockPos glassPos) {",
        "    HttpUtil.DOWNLOADER_EXECUTOR.submit(() -> {",
        "        Chunk chunk = world.getChunk(glassPos);",
        "",
        "        for (int i = glassPos.getY() - 1; i >= 0; --i) {",
        "            final BlockPos blockPos = new BlockPos(glassPos.getX(), i, glassPos.getZ());",
        "",
        "            if (!chunk.canSeeSky(blockPos)) {",
        "                break;",
        "            }",
        "",
        "            IBlockState state = world.getBlockState(blockPos);",
        "",
        "            if (state.getBlock() == Blocks.BEACON) {",
        "                ((WorldServer) world).addScheduledTask(() -> {",
        "                    TileEntity tileEntity = world.getTileEntity(blockPos);",
        "",
        "                    if (tileEntity instanceof TileEntityBeacon) {",
        "                        ((TileEntityBeacon) tileEntity).updateBeacon();",
        "                        world.addBlockEvent(blockPos, Blocks.BEACON, 1, 0);",
        "                    }",
        "                });",
        "            }",
        "        }",
        "    });",
        "}"
      ],
      "description": "This is the code that runs whether a stained glass is placed in the world. As you can see the code is pushed onto the <code>HttpUtil.DOWNLOADER_EXECUTOR</code> which is <b>not</b> the main thread. However inside this asynchronous code the method <code>world.getChunk</code> is called. This is where race conditions can start to happen, I will not go into detail here but after code diggers found this they started to think of ways to exploit this to intentionally cause race conditions to try and obtain unobtainable items in the game.\nHere is a <a href=\"https://youtu.be/rNcFv5tccrg\">detailed video of falling block</a> which exploits this code in order to do what was considered impossible."
    },
    {
      "name": "move_to_block_goal_find_nearest_block",
      "fact": "wandering_zombies",
      "mappings": "Mojang",
      "source": "net.minecraft.world.entity.ai.goal.MoveToBlockGoal",
      "version": "1.18.2",
      "snippet": [
        "protected boolean findNearestBlock() {",
        "    int i = this.searchRange;",
        "    int j = this.verticalSearchRange;",
        "    BlockPos blockPos = this.mob.blockPosition();",
        "    BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();",
        "",
        "    for(int k = this.verticalSearchStart; k <= j; k = k > 0 ? -k : 1 - k) {",
        "        for(int l = 0; l < i; ++l) {",
        "            for(int m = 0; m <= l; m = m > 0 ? -m : 1 - m) {",
        "                for(int n = m < l && m > -l ? l : 0; n <= l; n = n > 0 ? -n : 1 - n) {",
        "                    mutableBlockPos.setWithOffset(blockPos, m, k - 1, n);",
        "                    if (this.mob.isWithinRestriction(mutableBlockPos) && this.isValidTarget(this.mob.level(), mutableBlockPos)) {",
        "                        this.blockPos = mutableBlockPos;",
        "                        return true;",
        "                    }",
        "                }",
        "            }",
        "        }",
        "    }",
        "",
        "    return false;",
        "}"
      ],
      "description": "This is the code that determines where the Zombie should pathfind to. It searches around the mob and if any positions are valid targets as determined by <code>this.isValidTarget</code> then that is where the Zombie will try to pathfind to. Otherwise the target position, <code>this.blockPos</code> is unchanged. This is significant because by default it is assigned to <code>BlockPos.ZERO</code> which corresponds to <code>(0, 0, 0)</code>."
    },
    {
      "name": "remove_block_goal_can_use",
      "fact": "wandering_zombies",
      "mappings": "Mojang",
      "source": "net.minecraft.world.entity.ai.goal.RemoveBlockGoal",
      "version": "1.18.2",
      "snippet": [
        "@Override",
        "public boolean canUse() {",
        "    if (!this.removerMob.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {",
        "        return false;",
        "    } ",
        "    if (this.nextStartTick > 0) {",
        "        --this.nextStartTick;",
        "        return false;",
        "    } ",
        "    if (this.findNearestBlock()) {",
        "        this.nextStartTick = reducedTickDelay(20);",
        "        return true;",
        "    } ",
        "    this.nextStartTick = this.nextStartTick(this.mob);",
        "    return false;",
        "}",
        "",
        "private boolean findNearestBlock() {",
        "    return this.blockPos != null && this.isValidTarget(this.mob.level, this.blockPos) ? true : this.findNearestBlock();",
        "}"
      ],
      "description": "This code determines whether this AI goal can be used or not, as you can see one of the conditions in <code>canUse</code> method is <code>this.findNearestBlock</code> which is also included in this snippet. This method checks whether the current target position <code>this.blockPos</code> is <code>null</code> and then check whether it is a valid target. If you recall from the last snippet the target position is initialised to <code>BlockPos.ORIGIN</code> <b>not</b> <code>null</code> and thus this check is <code>null</code> check is redundant. If the block position was not initialised properly it will <b>always</b> check the origin position, thus if you place a turtle egg at the origin Zombies will pathfind to it."
    },
    {
      "name": "server_game_packet_listener_impl_handle_move_player",
      "fact": "dimensional_piston_teleportation",
      "mappings": "Mojang",
      "source": "net.minecraft.server.network.ServerGamePacketListenerImpl",
      "version": "1.20.4",
      "snippet": [
        "@Override",
        "public void handleMovePlayer(ServerboundMovePlayerPacket packet) { ",
        "    ServerLevel level = player.serverLevel();",
        "",
        "    double newX = clampHorizontal(packet.getX(this.player.getX()));",
        "    double newY = clampVertical(packet.getY(this.player.getY()));",
        "    double newZ = clampHorizontal(packet.getZ(this.player.getZ()));",
        "    float newYRot = Mth.wrapDegrees(packet.getYRot(this.player.getYRot()));",
        "    float newXRot = Mth.wrapDegrees(packet.getXRot(this.player.getXRot()));",
        "",
        "    // ...",
        "",
        "    double currentX = this.player.getX();",
        "    double currentY = this.player.getY();",
        "    double currentZ = this.player.getZ();",
        "",
        "    // ...",
        "",
        "    AABB boundingBox = this.player.getBoundingBox();",
        "    double deltaX = newX - this.lastGoodX;",
        "    double deltaY = newY - this.lastGoodY;",
        "    double deltaZ = newZ - this.lastGoodZ;",
        "",
        "    // ...",
        "",
        "    this.player.move(MoverType.PLAYER, new Vec3(deltaX, deltaY, deltaZ));",
        "",
        "    // ...",
        "",
        "    if ((!movedWrongly || !level.noCollision(this.player, boundingBox)) && !this.isPlayerCollidingWithAnythingNew(level, boundingBox, newX, newY, newZ)) {",
        "        // ...",
        "    } else {",
        "        this.teleport(currentX, currentY, currentZ, newYRot, newXRot);",
        "        // ...",
        "    }",
        "}"
      ],
      "description": "This is the code for handling player movement packets from the client. I have commented out any irrelevant code. This code will be called after the player has been moved by the piston. So the first important call is to <code>this.player.move</code> which you can see in the snippet below. This checks the collision of the player and shifts the player up, and the player has now changed dimensions to the End, for more detail read the snippet below before continuing. \n<br><br>\nNow we move onto the if check, the important check here is the <code>!this.isPlayerCollidingWithAnythingNew(level, boundingBox, newX, newY, newZ)</code>. This checks whether the player's bounding box has changed which it has and as such the game believes this movement to be invalid. So we are directed to the else statement and this teleports us back to our current position (ignoring our new position), normally this would just rubber band the player back to their old position on the client, however because the player has now <b>changed dimensions</b> this actually teleports us to these coordinates in the End dimension."
    },
    {
      "name": "entity_move",
      "fact": "dimensional_piston_teleportation",
      "mappings": "Mojang",
      "source": "net.minecraft.world.entity.Entity",
      "version": "1.20.4",
      "snippet": [
        "public void move(MoverType type, Vec3 motion) {",
        "    // ...",
        "",
        "    Vec3 delta = this.collide(motion);",
        "    double distance = delta.lengthSqr();",
        "    if (distance > 1.0E-7) {",
        "        // ...",
        "",
        "        this.setPos(this.getX() + delta.x, this.getY() + delta.y, this.getZ() + delta.z);",
        "    }",
        "",
        "    // ...",
        "    ",
        "    this.tryCheckInsideBlocks();",
        "",
        "    // ...",
        "}"
      ],
      "description": "This snippet shows the move method which handles moving entities with some given motion delta. This firstly checks all entity collisions with <code>this.collide</code> which returns the modified delta taking into account the collisions, in our case because we have just been pushed by a piston we are now colliding with the piston and the game wants to push us up, which means the <code>delta</code> variable is the <code>motion</code> variable but shifted 1 in the y axis.\n<br><br>\nThen the game sets the entity's position which moves the player up by 1 because the of the collision delta, this modifies the player's bounding box to also be shifted up by one. Next for the <code>this.tryCheckInsideBlocks()</code> method which checks collisions with blocks, in our case we are interested in the collision with the end portal block, you can see the snippet for this below. This changes our dimension and teleports the player to the end spawn platform. Now we can return back to the <code>handleMovePlayer</code> method in the snippet above."
    },
    {
      "name": "end_portal_block_entity_inside",
      "fact": "dimensional_piston_teleportation",
      "mappings": "Mojang",
      "source": "net.minecraft.world.level.block.EndPortalBlock",
      "version": "1.20.4",
      "snippet": [
        "@Override",
        "public void entityInside(BlockState state, Level level, BlockPos pos, Entity entity) {",
        "    if (level instanceof ServerLevel && entity.canChangeDimensions() && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move(-pos.getX(), -pos.getY(), -pos.getZ())), state.getShape(level, pos), BooleanOp.AND)) {",
        "        ResourceKey<Level> resourceKey = level.dimension() == Level.END ? Level.OVERWORLD : Level.END;",
        "        ServerLevel serverLevel = ((ServerLevel) level).getServer().getLevel(resourceKey);",
        "        if (serverLevel == null) {",
        "            return;",
        "        }",
        "",
        "        entity.changeDimension(serverLevel);",
        "    }",
        "}"
      ],
      "description": "This snippet shows what happens when an entity collides with the end portal block. It checks whether the entity is able to change dimensions and whether it is actually intersecting with the hitbox of the end portal. If it is then the <code>entity.changeDimension</code> method is called which changes the entities dimension and teleports them to an appropriate position, in our case when the player teleports to the end they get teleported to the end platform. Now you can return to the <code>move</code> method in the snippet above."
    },
    {
      "name": "world_gen_big_tree_generate_limbs",
      "fact": "undefined_logs",
      "mappings": "MCP",
      "source": "net.minecraft.world.gen.feature.WorldGenBigTree",
      "version": "1.8",
      "snippet": [
        "void generateLimbs(BlockPos startPos, BlockPos endPos, Block block) {",
        "    BlockPos pos = endPos.add(-startPos.getX(), -startPos.getY(), -startPos.getZ());",
        "    int distance = this.getGreatestDistance(pos);",
        "    float deltaX = pos.getX() / (float) distance;",
        "    float deltaY = pos.getY() / (float) distance;",
        "    float deltaZ = pos.getZ() / (float) distance;",
        "",
        "    for (int i = 0; j <= distance; ++i) {",
        "        BlockPos logPos = startPos.add(0.5F + i * deltaX, 0.5F + i * deltaY, 0.5F + i * deltaZ);",
        "        BlockLog.EnumAxis axis = this.calculateAxis(startPos, logPos);",
        "        this.setBlockAndNotifyAdequately(this.world, logPos, block.getDefaultState().withProperty(BlockLog.LOG_AXIS, axis));",
        "    }",
        "}"
      ],
      "description": "The bug in the code is that we are dividing by <code>distance</code> where it is possible that is it 0. As a result <code>deltaX</code>, <code>deltaY</code>, and <code>deltaZ</code> will all be <code>NaN</code>, then in out for loop we use this to add to our starting position. Any floating point number added or multiplied by <code>NaN</code> will simply return <code>NaN</code> so we add this to our starting position then cast to integers and our <code>logPos</code> will always be <code>(0, 0, 0)</code>, then the code calls <code>this.setBlockAndNotifyAdequately</code> which places the block in the world."
    }
  ]
}